@INPROCEEDINGS{Yang18,
  author={Y. {Yang} and Z. {Ren} and X. {Chen} and H. {Jiang}},
  booktitle={2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)}, 
  title={Structural Function Based Code Clone Detection Using a New Hybrid Technique}, 
  year={2018},
  volume={01},
  number={},
  pages={286-291},
  doi={10.1109/COMPSAC.2018.00045}
}
@INPROCEEDINGS{Baxter98,  author={I. D. {Baxter} and A. {Yahin} and L. {Moura} and M. {Sant'Anna} and L. {Bier}},  booktitle={Proceedings. International Conference on Software Maintenance (Cat. No. 98CB36272)},   title={Clone detection using abstract syntax trees},   year={1998},  volume={},  number={},  pages={368-377},  doi={10.1109/ICSM.1998.738528}}
@ARTICLE{Ain19,  author={Q. U. {Ain} and W. H. {Butt} and M. W. {Anwar} and F. {Azam} and B. {Maqbool}},  journal={IEEE Access},   title={A Systematic Review on Code Clone Detection},   year={2019},  volume={7},  number={},  pages={86121-86144},  doi={10.1109/ACCESS.2019.2918202}}
@inproceedings{Eppsetin95,
author = {Eppstein, David},
title = {Subgraph Isomorphism in Planar Graphs and Related Problems},
year = {1995},
isbn = {0898713498},
publisher = {Society for Industrial and Applied Mathematics},
address = {USA},
booktitle = {Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms},
pages = {632–640},
numpages = {9},
location = {San Francisco, California, USA},
series = {SODA '95}
}
@inproceedings{Liu06,
author = {Liu, Chao and Chen, Chen and Han, Jiawei and Yu, Philip S.},
title = {GPLAG: Detection of Software Plagiarism by Program Dependence Graph Analysis},
year = {2006},
isbn = {1595933395},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1150402.1150522},
doi = {10.1145/1150402.1150522},
abstract = {Along with the blossom of open source projects comes the convenience for software plagiarism. A company, if less self-disciplined, may be tempted to plagiarize some open source projects for its own products. Although current plagiarism detection tools appear sufficient for academic use, they are nevertheless short for fighting against serious plagiarists. For example, disguises like statement reordering and code insertion can effectively confuse these tools. In this paper, we develop a new plagiarism detection tool, called GPLAG, which detects plagiarism by mining program dependence graphs (PDGs). A PDG is a graphic representation of the data and control dependencies within a procedure. Because PDGs are nearly invariant during plagiarism, GPLAG is more effective than state-of-the-art tools for plagiarism detection. In order to make GPLAG scalable to large programs, a statistical lossy filter is proposed to prune the plagiarism search space. Experiment study shows that GPLAG is both effective and efficient: It detects plagiarism that easily slips over existing tools, and it usually takes a few seconds to find (simulated) plagiarism in programs having thousands of lines of code.},
booktitle = {Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining},
pages = {872–881},
numpages = {10},
keywords = {program dependence graph, graph mining, software plagiarism detection},
location = {Philadelphia, PA, USA},
series = {KDD '06}
}
@InProceedings{Gautam16,
author="Gautam, Pratiksha
and Saini, Hemraj",
editor="Unal, Aynur
and Nayak, Malaya
and Mishra, Durgesh Kumar
and Singh, Dharm
and Joshi, Amit",
title="Various Code Clone Detection Techniques and Tools: A Comprehensive Survey",
booktitle="Smart Trends in Information Technology and Computer Communications",
year="2016",
publisher="Springer Singapore",
address="Singapore",
pages="655--667",
abstract="In this paper, we have discussed several code replication detection methods and tools in different dimensions. This review has provided an extensive survey codec clone detection techniques and tools. Starting from clone perceptions, classification of clones and an overall assortment of selected techniques and tools is discussed. This paper covers the whole paradigm in clone detection and presents open research avenues in code clone detection.",
isbn="978-981-10-3433-6"
}
@article{Dang15,
author = {Dang, Shilpa},
year = {2015},
month = {04},
pages = {1903-1906},
title = {Performance Evaluation of Clone Detection Tools},
volume = {4},
journal = {International Journal of Science and Research (IJSR)}
}
@article{Ferrante87,
author = {Ferrante, Jeanne and Ottenstein, Karl and Warren, Joe},
year = {1987},
month = {07},
pages = {319-349},
title = {The Program Dependence Graph and Its Use in Optimization.},
volume = {9},
journal = {ACM Transactions on Programming Languages and Systems},
doi = {10.1145/24039.24041}
}
@article{Thummalapenta10,
author = {Thummalapenta, Suresh and Cerulo, Luigi and Aversano, L. and Di Penta, Massimiliano},
year = {2010},
month = {02},
pages = {1-34},
title = {An Empirical Study on the Maintenance of Source Code Clones},
volume = {15},
journal = {Empirical Software Engineering},
doi = {10.1007/s10664-009-9108-x}
}
@misc{ wiki:ast,
   author = "Вікіпедія",
   title = "Абстрактне синтаксичне дерево --- Вікіпедія{,} ",
   year = "2020",
   url = "https://uk.wikipedia.org/w/index.php?title=%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D0%B5_%D1%81%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%BD%D0%B5_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE&oldid=27659104",
   note = "[Онлайн; цитовано 5-листопад-2020]"
 }
@inproceedings{Sager06,
author = {Sager, Tobias and Bernstein, Abraham and Pinzger, Martin and Kiefer, Christoph},
year = {2006},
month = {01},
pages = {65-71},
title = {Detecting similar Java classes using tree algorithms},
doi = {10.1145/1137983.1138000}
}
@article{pdg-example,
author = {Tengeri, David and Havasi, Ferenc},
year = {2014},
month = {01},
pages = {629-653},
title = {Database Slicing on Relational Databases},
volume = {21},
journal = {Acta Cybernetica},
doi = {10.14232/actacyb.21.4.2014.6}
}
@INPROCEEDINGS{Koschke06,  author={R. {Koschke} and R. {Falke} and P. {Frenzel}},  booktitle={2006 13th Working Conference on Reverse Engineering},   title={Clone Detection Using Abstract Syntax Suffix Trees},   year={2006},  volume={},  number={},  pages={253-262},  doi={10.1109/WCRE.2006.18}}
@misc{ ast-example,
   author = {S. {Viswanadha} and J.V. {Gesser}},
   title = "Inspecting an AST",
   year = "2018",
   url = "https://javaparser.org/inspecting-an-ast/",
   note = "Онлайн"
 }
